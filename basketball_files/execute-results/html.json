{
  "hash": "c938ab68e959fb37d5a739ddd6b51b8b",
  "result": {
    "markdown": "---\ntitle: \"Basketball\"\n---\n\n\nThis is a test page with some analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(janitor)\nlibrary(dplyr)\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndec2_data <- read.csv(here('data/12-3-fantrax-stats.csv')) %>% \n  clean_names()\n```\n:::\n\n\nLet's look at the average fantasy points per game of the top 20 scorers on each fantasy team\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfantasy_team_stats_top20 <- dec2_data %>%\n  group_by(status) %>%\n  arrange(desc(fp_g)) %>%\n  slice_max(order_by = fp_g, n = 20) %>%\n  summarise(mean_fps_game = mean(fp_g),\n            age_top_20 = mean(age)) %>% \n  arrange(desc(mean_fps_game))\n\nfantasy_team_stats_top20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   status   mean_fps_game age_top_20\n   <chr>            <dbl>      <dbl>\n 1 BBB               33.5       30.7\n 2 Jmarr237          33.4       29.4\n 3 STARKS            31.5       28  \n 4 CCC               31.4       26.4\n 5 maxpat01          30.4       27.4\n 6 GBRAYERS          29.6       27.0\n 7 VSL               28.7       25.0\n 8 HHBC              28.5       26.0\n 9 Orcas             28.4       24  \n10 BIGFOOTS          25.4       24.2\n11 SERP              24.4       22.3\n12 SDP               23.2       24.2\n13 FA                15.7       28.2\n14 W (Mon)           13.2       20  \n15 W (Sun)           11.4       28.5\n```\n:::\n:::\n\n\nWhich teams have drafted the best to win this season based on ADP?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndec2_data$adp <- as.numeric(dec2_data$adp)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\ntop10_adp <- dec2_data %>% \n  group_by(status) %>% \n  arrange(desc(fp_g)) %>%\n  slice_max(order_by = fp_g, n = 6) %>%\n  summarize(avg_adp = mean(adp),\n            st_adp = sd(adp),\n            avg_fp_g = mean(fp_g),\n            avg_age = mean(age))\n\ntop10_adp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 5\n   status   avg_adp st_adp avg_fp_g avg_age\n   <chr>      <dbl>  <dbl>    <dbl>   <dbl>\n 1 BBB         26.8   24.4     47.7    30  \n 2 BIGFOOTS   101.    61.6     35.9    23.7\n 3 CCC         47.6   42.2     42.6    28.7\n 4 FA         663.   520.      17.4    27.3\n 5 GBRAYERS    55.3   35.6     40.5    24.3\n 6 HHBC        50.3   32.2     42.2    26.2\n 7 Jmarr237    29.1   24.1     45.2    31.8\n 8 Orcas       90.2   80.0     42.3    23.7\n 9 SDP         52.5   29.9     36.5    22.3\n10 SERP        82.7   47.6     34.1    20.8\n11 STARKS      41.2   31.3     41.8    27.2\n12 VSL         57.8   56.1     40.4    25  \n13 W (Mon)    426.    NA       13.2    20  \n14 W (Sun)    810.   497.      11.4    28.5\n15 maxpat01    31.4   26.2     45.8    28.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_data <- data.frame(\n  status = c(\"BBB\", \"BIGFOOTS\", \"CCC\", \"FA\", \"GBRAYERS\", \"HHBC\", \"Jmarr237\", \"Orcas\", \"SDP\", \"SERP\", \"STARKS\", \"VSL\", \"W (Mon)\", \"W (Sun)\", \"maxpat01\"),\n  avg_adp = c(36.444, 132.474, 73.996, 887.022, 74.268, 75.587, 41.462, 93.073, 113.332, 87.753, 61.734, 76.725, 425.520, 809.605, 88.989),\n  st_adp = c(23.61738, 79.90325, 51.43987, 484.52501, 38.97783, 43.63397, 28.84837, 66.76798, 102.91086, 39.61803, 44.00860, 58.68209, NA, 496.99000, 119.87338),\n  avg_fp_g = c(43.045, 31.145, 38.084, 16.635, 36.632, 37.360, 40.824, 36.683, 31.203, 30.979, 38.892, 36.071, 13.160, 11.360, 39.277),\n  avg_age = c(31.1, 24.4, 28.1, 27.4, 25.4, 27.2, 29.9, 23.9, 25.4, 22.6, 27.3, 24.8, 20.0, 28.5, 29.9)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Normalize avg_adp, avg_fp_g, and avg_age\nteam_data <- top10_adp %>%\n  mutate(\n    norm_avg_adp = (avg_adp - min(avg_adp)) / (max(avg_adp) - min(avg_adp)),\n    norm_avg_fp_g = (avg_fp_g - min(avg_fp_g)) / (max(avg_fp_g) - min(avg_fp_g)),\n    norm_avg_age = (avg_age - min(avg_age)) / (max(avg_age) - min(avg_age))\n  )\n\n# Constants for scaling and weight\nepsilon = 0.01  # To avoid division by zero\nweight_adp = 0.2  # Weight for avg_adp\nweight_fp_g = 0.6  # Weight for avg_fp_g\nweight_age = 0.2  # Weight for avg_age\n\n# Calculate Win Now Score\nteam_data <- team_data %>%\n  mutate(\n    win_now_score = ((1 / (norm_avg_adp + epsilon)) * weight_adp) + \n                    (norm_avg_fp_g * weight_fp_g) +\n                    ((1 / (norm_avg_age + epsilon)) * weight_age)\n  )\n\n# View the dataframe with Win Now Scores\nprint(team_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 9\n   status   avg_adp st_adp avg_fp_g avg_age norm_avg_adp norm_avg_fp_g\n   <chr>      <dbl>  <dbl>    <dbl>   <dbl>        <dbl>         <dbl>\n 1 BBB         26.8   24.4     47.7    30        0              1     \n 2 BIGFOOTS   101.    61.6     35.9    23.7      0.0944         0.675 \n 3 CCC         47.6   42.2     42.6    28.7      0.0267         0.860 \n 4 FA         663.   520.      17.4    27.3      0.812          0.166 \n 5 GBRAYERS    55.3   35.6     40.5    24.3      0.0365         0.802 \n 6 HHBC        50.3   32.2     42.2    26.2      0.0300         0.849 \n 7 Jmarr237    29.1   24.1     45.2    31.8      0.00302        0.931 \n 8 Orcas       90.2   80.0     42.3    23.7      0.0810         0.851 \n 9 SDP         52.5   29.9     36.5    22.3      0.0328         0.691 \n10 SERP        82.7   47.6     34.1    20.8      0.0714         0.626 \n11 STARKS      41.2   31.3     41.8    27.2      0.0184         0.838 \n12 VSL         57.8   56.1     40.4    25        0.0396         0.799 \n13 W (Mon)    426.    NA       13.2    20        0.509          0.0495\n14 W (Sun)    810.   497.      11.4    28.5      1              0     \n15 maxpat01    31.4   26.2     45.8    28.3      0.00591        0.947 \n# ℹ 2 more variables: norm_avg_age <dbl>, win_now_score <dbl>\n```\n:::\n:::\n\n\nCool! Now, let's look at the most promising young players in this dynasty format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunder25 <- dec2_data %>% \n  filter(age < 25, fp_g > 20)\n```\n:::\n\n\nIt would be neat to figure out the value of a future pick using trade information.\n\nLet's make a trade function\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read in data\ndec3_trades <- read.csv(here('data/12-3-trades.csv'))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# trade log\ntrades_df <- data.frame(\n  From_Team = character(), \n  To_Team = character(), \n  Date = character(), \n  Period = integer(), \n  Item1 = character(), \n  Item2 = character(),\n  stringsAsFactors = FALSE\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# # Assuming you've read your CSV file into a dataframe called 'csv_trades'\n# for (i in 1:nrow(dec3_trades)) {\n#   trades_df <- add_trade(\n#     trades_df, \n#     dec3_trades$Player[i], \n#     dec3_trades$Team[i], \n#     dec3_trades$Position[i], \n#     dec3_trades$From[i], \n#     dec3_trades$To[i], \n#     dec3_trades$`Date (PST)`[i], \n#     dec3_trades$Period[i]\n#   )\n# }\n# \n# add_trade <- function(trade_df, player, team, position, from_team, to_team, date, period) {\n#   new_trade <- data.frame(\n#     Player = player,\n#     Team = team,\n#     Position = position,\n#     From = from_team,\n#     To = to_team,\n#     Date = date,\n#     Period = period,\n#     stringsAsFactors = FALSE\n#   )\n#   \n#   updated_trades_df <- rbind(trade_df, new_trade)\n#   return(updated_trades_df)\n# }\n# \n# \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
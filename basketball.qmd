---
title: "Basketball"
---

This is a test page with some analysis.

```{r, message=FALSE}
library(here)
library(janitor)
library(dplyr)
library(tidyverse)
```

```{r}
dec2_data <- read.csv(here('data/12-3-fantrax-stats.csv')) %>% 
  clean_names()
```

Let's look at the average fantasy points per game of the top 20 scorers on each fantasy team

```{r}
fantasy_team_stats_top20 <- dec2_data %>%
  group_by(status) %>%
  arrange(desc(fp_g)) %>%
  slice_max(order_by = fp_g, n = 20) %>%
  summarise(mean_fps_game = mean(fp_g),
            age_top_20 = mean(age)) %>% 
  arrange(desc(mean_fps_game))

fantasy_team_stats_top20
```

Which teams have drafted the best to win this season based on ADP?

```{r}
dec2_data$adp <- as.numeric(dec2_data$adp)

top10_adp <- dec2_data %>% 
  group_by(status) %>% 
  arrange(desc(fp_g)) %>%
  slice_max(order_by = fp_g, n = 6) %>%
  summarize(avg_adp = mean(adp),
            st_adp = sd(adp),
            avg_fp_g = mean(fp_g),
            avg_age = mean(age))

top10_adp
  
```

```{r}
team_data <- data.frame(
  status = c("BBB", "BIGFOOTS", "CCC", "FA", "GBRAYERS", "HHBC", "Jmarr237", "Orcas", "SDP", "SERP", "STARKS", "VSL", "W (Mon)", "W (Sun)", "maxpat01"),
  avg_adp = c(36.444, 132.474, 73.996, 887.022, 74.268, 75.587, 41.462, 93.073, 113.332, 87.753, 61.734, 76.725, 425.520, 809.605, 88.989),
  st_adp = c(23.61738, 79.90325, 51.43987, 484.52501, 38.97783, 43.63397, 28.84837, 66.76798, 102.91086, 39.61803, 44.00860, 58.68209, NA, 496.99000, 119.87338),
  avg_fp_g = c(43.045, 31.145, 38.084, 16.635, 36.632, 37.360, 40.824, 36.683, 31.203, 30.979, 38.892, 36.071, 13.160, 11.360, 39.277),
  avg_age = c(31.1, 24.4, 28.1, 27.4, 25.4, 27.2, 29.9, 23.9, 25.4, 22.6, 27.3, 24.8, 20.0, 28.5, 29.9)
)

```

```{r}
# Normalize avg_adp, avg_fp_g, and avg_age
team_data <- top10_adp %>%
  mutate(
    norm_avg_adp = (avg_adp - min(avg_adp)) / (max(avg_adp) - min(avg_adp)),
    norm_avg_fp_g = (avg_fp_g - min(avg_fp_g)) / (max(avg_fp_g) - min(avg_fp_g)),
    norm_avg_age = (avg_age - min(avg_age)) / (max(avg_age) - min(avg_age))
  )

# Constants for scaling and weight
epsilon = 0.01  # To avoid division by zero
weight_adp = 0.2  # Weight for avg_adp
weight_fp_g = 0.6  # Weight for avg_fp_g
weight_age = 0.2  # Weight for avg_age

# Calculate Win Now Score
team_data <- team_data %>%
  mutate(
    win_now_score = ((1 / (norm_avg_adp + epsilon)) * weight_adp) + 
                    (norm_avg_fp_g * weight_fp_g) +
                    ((1 / (norm_avg_age + epsilon)) * weight_age)
  )

# View the dataframe with Win Now Scores
print(team_data)
```

Cool! Now, let's look at the most promising young players in this dynasty format.

```{r}
under25 <- dec2_data %>% 
  filter(age < 25, fp_g > 20)
```

It would be neat to figure out the value of a future pick using trade information.

Let's make a trade function

```{r}
# read in data
dec3_trades <- read.csv(here('data/12-3-trades.csv'))
```

```{r}
# trade log
trades_df <- data.frame(
  From_Team = character(), 
  To_Team = character(), 
  Date = character(), 
  Period = integer(), 
  Item1 = character(), 
  Item2 = character(),
  stringsAsFactors = FALSE
)
```

```{r}
# # Assuming you've read your CSV file into a dataframe called 'csv_trades'
# for (i in 1:nrow(dec3_trades)) {
#   trades_df <- add_trade(
#     trades_df, 
#     dec3_trades$Player[i], 
#     dec3_trades$Team[i], 
#     dec3_trades$Position[i], 
#     dec3_trades$From[i], 
#     dec3_trades$To[i], 
#     dec3_trades$`Date (PST)`[i], 
#     dec3_trades$Period[i]
#   )
# }
# 
# add_trade <- function(trade_df, player, team, position, from_team, to_team, date, period) {
#   new_trade <- data.frame(
#     Player = player,
#     Team = team,
#     Position = position,
#     From = from_team,
#     To = to_team,
#     Date = date,
#     Period = period,
#     stringsAsFactors = FALSE
#   )
#   
#   updated_trades_df <- rbind(trade_df, new_trade)
#   return(updated_trades_df)
# }
# 
# 

```
